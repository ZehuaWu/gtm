cat(failures)
}
}
}
}
}
get.trends<-function(queries=NULL, geo="US", time="all", save=TRUE, path=getwd()){
suppressMessages(require(gtrendsR))
if(is.null(queries)){
stop("No queries provided.")
}else{
num.queries=as.numeric(length(queries))
num.files=0
failures=vector()
data.list<-list()
data.names<-vector()
for(i in 1:length(queries)){
keyword=queries[i]
if(class(try(df<-gtrends(keyword=keyword, geo=geo, time=time)[[1]][,1:4], T))[1]!="try-error"){
data<-df
}else{
keyword<-paste("'", keyword, "'", " ", sep="")
failures<-append(failures, keyword)
next
}
if(is.null(data)){
keyword<-paste("'", keyword, "'", " ", sep="")
failures<-append(failures, keyword)
next
}
colnames(data)[2]<-attr(factor(data$keyword), "level")
data<-data[,1:2]
if(save){
file.name=paste(path, "/", keyword, ".csv", sep="")
write.csv(x=data, file=file.name, row.names=F)
}else{
data.list<-append(data.list, list(data))
data.names<-append(data.names, keyword)
}
num.files=num.files+1
}
num.omit=num.queries-num.files
if(save){
cat(num.queries, " queries submitted in total.", "\n",num.files, " queries processed and downloaded in ", "'", path, "'", ".", "\n", num.omit, " queries omitted. ", "\n", sep="")
if(num.omit!=0){
cat("These are: ")
cat(failures)
}else{
names(data.list)<-data.names
return(data.list)
cat(num.queries, " queries submitted in total.", "\n",num.files, " queries processed.", "\n", num.omit, " queries omitted. ", "\n", sep="")
if(num.omit!=0){
cat("These are: ")
cat(failures)
}
}
}
}
}
queries<-c("inflation", "unemployed", "sjkfhshfkhsdkfjhsadfhkhkd", "USA", "usdafhgksahfkjsahfkfskljfhklsjafhkhsdf", "Trump")
testtest<-get.trends(queries=queries, geo="US", time="all", save=F)
queries
class(queries)
?get.trends
get.trends<-function(queries=NULL, geo="US", time="all", path=getwd()){
suppressMessages(require(gtrendsR))
if(is.null(queries)|class(queries)!="character"){
stop("Queries have to be provided as a vector of characters.")
}else{
num.queries=as.numeric(length(queries))
num.files=0
failures=vector()
for(i in 1:length(queries)){
keyword=queries[i]
if(class(try(df<-gtrends(keyword=keyword, geo=geo, time=time)[[1]][,1:4], T))[1]!="try-error"){
data<-df
}else{
keyword<-paste("'", keyword, "'", " ", sep="")
failures<-append(failures, keyword)
next
}
if(is.null(data)){
keyword<-paste("'", keyword, "'", " ", sep="")
failures<-append(failures, keyword)
next
}
colnames(data)[2]<-attr(factor(data$keyword), "level")
data<-data[,1:2]
file.name=paste(path, "/", keyword, ".csv", sep="")
write.csv(x=data, file=file.name, row.names=F)
num.files=num.files+1
}
num.omit=num.queries-num.files
cat(num.queries, " queries submitted in total.", "\n",num.files, " queries processed and downloaded in ", "'", path, "'", ".", "\n", num.omit, " queries omitted. ", "\n", sep="")
if(num.omit!=0){
cat("These are: ")
cat(failures)
}
}
}
data("US_Inflation_Queries")
inflation<-US_Inflation_Queries$Queries
class(inflation)
get.trends(queries=inflation[1], geo="US", time="all", path=dir)
class(inflation[1])
inflation<-as.character(US_Inflation_Queries$Queries)
get.trends(queries=inflation[1], geo="US", time="all", path="/Users/patrick/Desktop")
library(gtm)
?get.trends
accuracy
?accuracy
library(dynfactoR)
?dfm
library(gtm)
?get.trends
?use_package
?maeforecast
?match.fun
match.fun(maeforecast.alasso)
FUN<-maeforecast.alasso
FUN=maeforecast.alasso
?FUN
FUN()
?maeforecast
match.fun("maeforecast.ar")
FUN<-match.fun("maeforecast.ar")
FUN
rm(maeforecast.ar)
match.fun(maeforecast.ar)
match.fun("maeforecast.ar")
FUN<-match.fun("maeforecast.ar")
FUN()
FUN
?rep
?Metrics
?maeforecast
model="ar"
paste("maeforecast.", "ar", sep="")
paste("maeforecast.", model, sep="")
FUN<-paste("maeforecast.", model, sep="")
macth.fun(FUN)
match.fun(FUN)
library(gtm)
?Bagging
?maeforecast
?maeforecast
?bld.mbb.bootstrap
?maeforecast
?maeforecast
library(gtm)
rm(list=ls())
knitr::opts_chunk$set(
cache       = TRUE,     # if TRUE knitr will cache the results to reuse in future knits
fig.width   = 6,       # the width for plots created by code chunk
fig.height  = 4,       # the height for plots created by code chunk
fig.align   = 'center', # how to align graphics in the final doc. 'left', 'right', 'center'
fig.path    = 'figs/',  # file path to the directory where knitr shall store the graphics files
results     = 'asis',   # knitr will pass through results without reformatting them
echo        = TRUE,     # in FALSE knitr will not display code in the code chunk above it's results
message     = TRUE,     # if FALSE knitr will not display any messages generated by code
strip.white = TRUE,     # if FALSE knitr will not remove white spaces at the beg or end of code chunk
warning     = FALSE)    # if FALSE knitr will not display any warning messages in the final document
library(lubridate)
library(bsts)
library(ggplot2)
library(reshape2)
library(Boom)
library(graphics)
library(tibble)
library(readr)
library(magrittr)
library(plyr)
library(dplyr)
library(ggplot2)
library(magrittr)  # getting %>% operator for dplyr
library(readr)
library(GGally)
library(gridExtra)  # layouts for ggplot
library(grid)  # layouts for ggplot
# best subset selection, forward and backward search
library(leaps)
# regularized regression
library(glmnet)
library(rRAP)
library(lars)
library(forecast)
library(tidyverse)
library(pROC)
library(gtm)
data("US_Unemployment")
mydata<-US_Unemployment
mydata[mydata == 0] <- 1
## Replace all character with NAs and then with ones
for (i in 2:ncol(mydata)) {
mydata[,i] = as.numeric(as.character(mydata[,i]))
}
mydata[is.na(mydata)] <- 1
## Remove columns with means smaller than 10
mydata<-df.clean(mydata, threshold=10, index=3:ncol(mydata))
## Construct a zoo object
mydata<-read.zoo(mydata, index="Date", format="%Y-%m-%d")
## Take diff and log of original dataset
for (i in 2:ncol(mydata)) {
mydata[,i] = c(0, diff(log(mydata[,i])))
}
mydata[,1] = c(0,diff(mydata[,1],1))
## Remove the first row which containes a 0
mydata<-mydata[2:(nrow(mydata)),]
## Remove NAs
mydata = na.omit(mydata)
?Bagging
Test<-Bagging(data=mydata, boot=3, model="postlasso", w_size=72)
Test
AR<-maeforecast(data=mydata, data="ar", w_size=72, window="recursive")
AR<-maeforecast(data=mydata, model="ar", w_size=72, window="recursive")
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = AR$Forecasts$Forecasts, true = AR$Forecasts$Realized)
colnames(df) <-c('date','AR(1) Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
Metrics(pred=Test, true=AR$Forecasts$Realized)
ARLASSO<-maeforecast(data=mydata, model="postlasso", w_size=72, window="recursive")
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = ARLASSO$Forecasts$Forecasts, true = ARLASSO$Forecasts$Realized)
colnames(df) <-c('date','Post-LASSO Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
ARLASSO
?Bagging
AR.bagged<-Bagging(data=mydata, boot=5, model="ar", w_size=72, window="recursive")
Metrics(pred=AR.bagged, true=AR$Forecasts$Realized)
AR.bagged<-Bagging(data=mydata, boot=5, model="ar", w_size=72, window="recursive")
AR.bagged<-Metrics(pred=AR.bagged, true=AR$Forecasts$Realized)
AR.bagged<-Bagging(data=mydata, boot=5, model="ar", w_size=72, window="recursive")
AR.bagged<-Metrics(pred=AR.bagged, true=AR$Forecasts$Realized)
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = AR.bagged$Forecasts$Forecasts, true = AR.bagged$Forecasts$Realized)
colnames(df) <-c('date','AR Bagging Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
ARLASSO.bagged<-Bagging(data=mydata, boot=5, model="ar", w_size=72, window="recursive")
ARLASSO.bagged<-Metrics(pred=ARLASSO.bagged, true=ARLASSO$Forecasts$Realized)
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = ARLASSO.bagged$Forecasts$Forecasts, true = ARLASSO.bagged$Forecasts$Realized)
colnames(df) <-c('date','Post Lasso Bagging Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
ARLASSO.bagged<-Bagging(data=mydata, boot=5, model="postlasso", w_size=72, window="recursive")
ARLASSO.bagged<-Bagging(data=mydata, boot=5, model="postlasso", w_size=72, window="recursive")
ARLASSO.bagged
ARLASSO.bagged<-Metrics(pred=ARLASSO.bagged, true=ARLASSO$Forecasts$Realized)
ARLASSO.bagged
?maeforecast
?boot
library(boot)
?tsboot
model<-"ar"
paste("maeforecast.", model, sep="")
match.fun(paste("maeforecast.", model, sep=""))
maeforecast.ar
library(gtm)
match.fun(paste("maeforecast.", model, sep=""))
?NROW
Bagging
Bagging<-function(data=NULL, boot=NULL, model="ar", w_size=NULL, sim="fixed", l=12L, norm=TRUE, n.sim=NROW(data), window="recursive", ...){
suppressMessages(require(boot))
results<-tsboot(tseries=data, statistic=maeforecast.simplified, R=boot,
sim=sim, l=l, n.sim=n.sim, norm=norm, w_size=w_size, window=window, ...)$t
results<-t(results)
return(results)
}
Bagging
?tsboot
?tsboot
library(gtm)
?Bagging
rm(list=ls())
knitr::opts_chunk$set(
cache       = TRUE,     # if TRUE knitr will cache the results to reuse in future knits
fig.width   = 6,       # the width for plots created by code chunk
fig.height  = 4,       # the height for plots created by code chunk
fig.align   = 'center', # how to align graphics in the final doc. 'left', 'right', 'center'
fig.path    = 'figs/',  # file path to the directory where knitr shall store the graphics files
results     = 'asis',   # knitr will pass through results without reformatting them
echo        = TRUE,     # in FALSE knitr will not display code in the code chunk above it's results
message     = TRUE,     # if FALSE knitr will not display any messages generated by code
strip.white = TRUE,     # if FALSE knitr will not remove white spaces at the beg or end of code chunk
warning     = FALSE)    # if FALSE knitr will not display any warning messages in the final document
library(lubridate)
library(bsts)
library(ggplot2)
library(reshape2)
library(Boom)
library(graphics)
library(tibble)
library(readr)
library(magrittr)
library(plyr)
library(dplyr)
library(ggplot2)
library(magrittr)  # getting %>% operator for dplyr
library(readr)
library(GGally)
library(gridExtra)  # layouts for ggplot
library(grid)  # layouts for ggplot
# best subset selection, forward and backward search
library(leaps)
# regularized regression
library(glmnet)
library(rRAP)
library(lars)
library(forecast)
library(tidyverse)
library(pROC)
library(gtm)
data("US_Unemployment")
mydata<-US_Unemployment
mydata[mydata == 0] <- 1
## Replace all character with NAs and then with ones
for (i in 2:ncol(mydata)) {
mydata[,i] = as.numeric(as.character(mydata[,i]))
}
mydata[is.na(mydata)] <- 1
## Remove columns with means smaller than 10
mydata<-df.clean(mydata, threshold=10, index=3:ncol(mydata))
## Construct a zoo object
mydata<-read.zoo(mydata, index="Date", format="%Y-%m-%d")
## Take diff and log of original dataset
for (i in 2:ncol(mydata)) {
mydata[,i] = c(0, diff(log(mydata[,i])))
}
mydata[,1] = c(0,diff(mydata[,1],1))
## Remove the first row which containes a 0
mydata<-mydata[2:(nrow(mydata)),]
## Remove NAs
mydata = na.omit(mydata)
AR<-maeforecast(data=mydata, model="ar", w_size=72, window="recursive")
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = AR$Forecasts$Forecasts, true = AR$Forecasts$Realized)
colnames(df) <-c('date','AR(1) Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
ARLASSO<-maeforecast(data=mydata, model="postlasso", w_size=72, window="recursive")
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = ARLASSO$Forecasts$Forecasts, true = ARLASSO$Forecasts$Realized)
colnames(df) <-c('date','Post-LASSO Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
AR.bagged<-Bagging(data=mydata, boot=5, model="ar", w_size=72, window="recursive")
AR.bagged<-Bagging(data=mydata, model="ar", w_size=72, window="recursive")
Bagging
AR.bagged<-Bagging(data=mydata, boot=5, model="ar", w_size=72, window="recursive")
library(gtm)
rm(list=ls())
knitr::opts_chunk$set(
cache       = TRUE,     # if TRUE knitr will cache the results to reuse in future knits
fig.width   = 6,       # the width for plots created by code chunk
fig.height  = 4,       # the height for plots created by code chunk
fig.align   = 'center', # how to align graphics in the final doc. 'left', 'right', 'center'
fig.path    = 'figs/',  # file path to the directory where knitr shall store the graphics files
results     = 'asis',   # knitr will pass through results without reformatting them
echo        = TRUE,     # in FALSE knitr will not display code in the code chunk above it's results
message     = TRUE,     # if FALSE knitr will not display any messages generated by code
strip.white = TRUE,     # if FALSE knitr will not remove white spaces at the beg or end of code chunk
warning     = FALSE)    # if FALSE knitr will not display any warning messages in the final document
library(lubridate)
library(bsts)
library(ggplot2)
library(reshape2)
library(Boom)
library(graphics)
library(tibble)
library(readr)
library(magrittr)
library(plyr)
library(dplyr)
library(ggplot2)
library(magrittr)  # getting %>% operator for dplyr
library(readr)
library(GGally)
library(gridExtra)  # layouts for ggplot
library(grid)  # layouts for ggplot
# best subset selection, forward and backward search
library(leaps)
# regularized regression
library(glmnet)
library(rRAP)
library(lars)
library(forecast)
library(tidyverse)
library(pROC)
library(gtm)
data("US_Unemployment")
mydata<-US_Unemployment
mydata[mydata == 0] <- 1
## Replace all character with NAs and then with ones
for (i in 2:ncol(mydata)) {
mydata[,i] = as.numeric(as.character(mydata[,i]))
}
mydata[is.na(mydata)] <- 1
## Remove columns with means smaller than 10
mydata<-df.clean(mydata, threshold=10, index=3:ncol(mydata))
## Construct a zoo object
mydata<-read.zoo(mydata, index="Date", format="%Y-%m-%d")
## Take diff and log of original dataset
for (i in 2:ncol(mydata)) {
mydata[,i] = c(0, diff(log(mydata[,i])))
}
mydata[,1] = c(0,diff(mydata[,1],1))
## Remove the first row which containes a 0
mydata<-mydata[2:(nrow(mydata)),]
## Remove NAs
mydata = na.omit(mydata)
AR<-maeforecast(data=mydata, model="ar", w_size=72, window="recursive")
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = AR$Forecasts$Forecasts, true = AR$Forecasts$Realized)
colnames(df) <-c('date','AR(1) Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
Test<-Bagging(data=mydata, boot=5, model="ar", w_size=72)
Test
AR.bagged<-Bagging(data=ts(mydata), boot=5, model="ar", w_size=72, window="recursive")
AR.bagged<-Metrics(pred=AR.bagged, true=AR$Forecasts$Realized)
values = seq(from = as.Date("2010-02-01"), to = as.Date("2019-01-01"), by = 'month')
df <- data.frame(date = values, predicts = AR.bagged$Forecasts$Forecasts, true = AR.bagged$Forecasts$Realized)
colnames(df) <-c('date','AR Bagging Model Out-of-sample Forecasts', 'Unemployment Rate Changes (US)')
df <- melt(df ,  id.vars = 'date')
ggplot(data = df) + geom_line(aes(x = date, y = value, linetype = variable, color = variable))
AR.bagged
ARLASSO.bagged<-Bagging(data=ts(mydata), boot=5, model="postlasso", w_size=72, window="recursive")
ARLASSO.bagged<-Bagging(data=ts(mydata), boot=5, model="postlasso", w_size=72, window="recursive")
ARLASSO.bagged<-Bagging(data=ts(mydata), boot=5, model="postlasso", w_size=72, window="recursive")
ARLASSO.bagged<-Bagging(data=ts(mydata), boot=3, model="postlasso", w_size=72, window="recursive")
ARLASSO.bagged<-Bagging(data=mydata, boot=1, model="postlasso", w_size=72, window="recursive")
ARLASSO.bagged<-Bagging(data=mydata, boot=1, model="lasso", w_size=72, window="recursive")
ARLASSO.bagged<-Metrics(pred=ARLASSO.bagged, true=ARLASSO$Forecasts$Realized)
ARLASSO.bagged<-Bagging(data=ts(mydata), boot=1, model="lasso", w_size=72, window="recursive")
ARLASSO.bagged<-Metrics(pred=ARLASSO.bagged, true=AR$Forecasts$Realized)
ARLASSO.bagged
library(gtm)
library(gtm)
?Bagging
countries
?get.trends
data("countries")
library(dtwclust)
?tsclust
Interactive_clustering()
interactive_clustering()
?do.call
clust.factor<-function(data=NULL, fac.num=3, ...){
suppressMessages(require(dtwclust))
Partition<-dtwclust::tsclust(series=t(data), k=fac.num, ...)
clusters<-sort(unique(Partition@cluster))
factors<-matrix(nrow=dim(data)[1], ncol=fac.num)
for(i in clusters){
members<-data.frame(data)[,which(Partition@cluster==i)]
factors[,i]<-rowMeans(na.omit(members))
}
return(factors)
}
clust.factor()
clust.factor
clust.factor<-function(data=NULL, fac.num=3, ...){
if(is.null(data)){
stop("Empty data.")
}
suppressMessages(require(dtwclust))
Partition<-dtwclust::tsclust(series=t(data), k=fac.num, ...)
clusters<-sort(unique(Partition@cluster))
factors<-matrix(nrow=dim(data)[1], ncol=fac.num)
for(i in clusters){
members<-data.frame(data)[,which(Partition@cluster==i)]
factors[,i]<-rowMeans(na.omit(members))
}
return(factors)
}
clust.factor()
clust.factor()
clust.factor
library(dynfactoR)
?dfm
?tsclust
data("US_Inflation")
clust.factor(mydata[,2:229])
clust.factor(as.numeric(mydata[,2:229]))
?Metrics
?clust.factor
clust.factor
?tsclust
library(gtm)
?Bagging
log(0.86, 0.5)
log(0.5, 0.86)
library(dynfactoR)
?dfm
?system.time
.Internal(base)
?citation
citation(package="gtm")
citation(package='base')
?gtm
?utils
?maeforecast
?clust.factor
?dfm
?maeforecast.dfm
?maeforecast.dfm
?tsclust
?dfm
?maeforecast.dfm
library(gtm)
