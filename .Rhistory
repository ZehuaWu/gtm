RSquared.Excess.Returns=rsquaredxr)
rownames(table)<-NULL
stargazer(table, header=F, summary=F, title="Results")
horizon<-seq(from=2, to=7, by=1)
table<-data.frame(Horizon=horizon, Slope.Yield.Change=slopesyc,
Rsquared.Yield.Change=rsquaredyc,
Slope.Excess.Returns=slopesxr,
RSquared.Excess.Returns=rsquaredxr)
rownames(table)<-NULL
stargazer(table, header=F, summary=F, title="Results",
rownames = F)
DMW<-vector()
as.numeric(1L)
library(gtm)
1==1L
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
?maeforecast
library(gtm)
library(dtwclust)
?tsclust
library(gtm)
library(dynfacto)
library(dynfactoR)
?dfm
setwd("~/Desktop/MAE_Lab/R_Packages/gtm/man")
library(gtm)
capitalize("recursive")
library(gtm)
?pnorm
model="ar"
model<-paste("Bagging.", model, sep="")
model
?Bagging
library(gtm)
library(gtm)
library(gtm)
library(gtm)
summary.lm
?plot.Maeforecast
?round
?plot.Maeforecast
library(gtm)
library(gtm)
?return
?coeftest
?maeforecast
?df,rm
?df.rm
library(gtm)
?Arima
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
load("~/Desktop/MAE_Lab/Projects/Google_Trends/Results/USD-AUS.RData")
load("~/Desktop/MAE_Lab/Projects/Google_Trends/Results/USD-AUS.RData")
preselection=NULL
print(preselection)
print(preselection)
x<-c(Data=1, w_size=2, window="recursive", t.select=NULL)
print(x)
library(gtm)
Test<-maeforecast(mydata, model="lasso", t.select=50, window="rolling", w_size=60)
summary(Test)
Test1<-maeforecast(mydata, model="lasso", window="rolling", w_size=60)
summary(Tes)
summary(Test)
summary(Test1)
?ifelse
library(gtm)
Test1<-maeforecast(mydata, model="lasso", window="rolling", w_size=60)
summary(Test1)
Test<-maeforecast(mydata, model="lasso", window="rolling", w_size=60, t.select=50)
summary(Test)
Test$Variables
summary(Test)
S<-summary
S(Test)
View(S)
S
rm(S)
Test
All.Ratio
Directional_NW<-function(forecasts=NULL, p=1, weighted=TRUE){
if(class(forecasts)!="Maeforecast"){
stop("Argument forecasts has to be of class 'Maeforecast'.")
}
nw <- function(y,qn){
T <- length(y)
ybar <- rep(1,T) * ((sum(y))/T)
dy <- y-ybar
G0 <- t(dy) %*% dy/T
for (j in 1:qn){
gamma <- t(dy[(j+1):T]) %*% dy[1:T-j]/T
G0 <- G0+(gamma+t(gamma))*(1-abs(j/(qn+1)))
}
return(as.numeric(G0))
}
if(weighted){
weighted.dir<-forecasts$Forecasts$Forecasted_Direction*forecasts$Forecasts$Realized
P <- length(weighted.dir)
varfroll.adj <- nw(y=weighted.dir, qn=p)
CW <- sqrt(P)*(mean(weighted.dir))/sqrt(varfroll.adj)
pv <- 2*pnorm(-abs(CW),0,1)
results=list(test.statistic=CW, pvalue=pv)
}else{
For<-forecasts$Forecasts$Forecasted_Direction-mean(forecasts$Forecasts$Forecasted_Direction)
True<-forecasts$Forecasts$True_Direction-mean(forecasts$Forecasts$True_Direction)
unweighted.dir<-For*True
P<-length(unweighted.dir)
varfroll.adj<-nw(y=unweighted.dir, qn=p)
CW<-sqrt(P)*(mean(unweighted.dir))/sqrt(varfroll.adj)
pv<-1-pnorm(CW,0,1)
results=list(test.statistic=CW, pvalue=pv)
}
return(results)
}
Directional_NW(rf.for3)
summary(rf.for3)
summary(rf.for)
Directional_NW(rf.for)
rm(Directional_NW())
rm(Directional_NW)
Directional_NW(rf.for)
Directional_NW<-function(forecasts=NULL, p=1, weighted=TRUE){
if(class(forecasts)!="Maeforecast"){
stop("Argument forecasts has to be of class 'Maeforecast'.")
}
nw <- function(y,qn){
T <- length(y)
ybar <- rep(1,T) * ((sum(y))/T)
dy <- y-ybar
G0 <- t(dy) %*% dy/T
for (j in 1:qn){
gamma <- t(dy[(j+1):T]) %*% dy[1:T-j]/T
G0 <- G0+(gamma+t(gamma))*(1-abs(j/(qn+1)))
}
return(as.numeric(G0))
}
if(weighted){
weighted.dir<-forecasts$Forecasts$Forecasted_Direction*forecasts$Forecasts$Realized
P <- length(weighted.dir)
varfroll.adj <- nw(y=weighted.dir, qn=p)
CW <- sqrt(P)*(mean(weighted.dir))/sqrt(varfroll.adj)
pv <- 2*pnorm(abs(CW),0,1, lower.tail=F)
results=list(test.statistic=CW, pvalue=pv)
}else{
For<-forecasts$Forecasts$Forecasted_Direction-mean(forecasts$Forecasts$Forecasted_Direction)
True<-forecasts$Forecasts$True_Direction-mean(forecasts$Forecasts$True_Direction)
unweighted.dir<-For*True
P<-length(unweighted.dir)
varfroll.adj<-nw(y=unweighted.dir, qn=p)
CW<-sqrt(P)*(mean(unweighted.dir))/sqrt(varfroll.adj)
pv<-1-pnorm(CW,0,1)
results=list(test.statistic=CW, pvalue=pv)
}
return(results)
}
Directional_NW(rf.for)
Directional_NW<-function(forecasts=NULL, p=1, weighted=TRUE){
if(class(forecasts)!="Maeforecast"){
stop("Argument forecasts has to be of class 'Maeforecast'.")
}
nw <- function(y,qn){
T <- length(y)
ybar <- rep(1,T) * ((sum(y))/T)
dy <- y-ybar
G0 <- t(dy) %*% dy/T
return(as.numeric(G0))
}
if(weighted){
weighted.dir<-forecasts$Forecasts$Forecasted_Direction*forecasts$Forecasts$Realized
P <- length(weighted.dir)
varfroll.adj <- nw(y=weighted.dir, qn=p)
CW <- sqrt(P)*(mean(weighted.dir))/sqrt(varfroll.adj)
pv <- 2*pnorm(abs(CW),0,1, lower.tail=F)
results=list(test.statistic=CW, pvalue=pv)
}else{
For<-forecasts$Forecasts$Forecasted_Direction-mean(forecasts$Forecasts$Forecasted_Direction)
True<-forecasts$Forecasts$True_Direction-mean(forecasts$Forecasts$True_Direction)
unweighted.dir<-For*True
P<-length(unweighted.dir)
varfroll.adj<-nw(y=unweighted.dir, qn=p)
CW<-sqrt(P)*(mean(unweighted.dir))/sqrt(varfroll.adj)
pv<-1-pnorm(CW,0,1)
results=list(test.statistic=CW, pvalue=pv)
}
return(results)
}
Directional_NW(rf.for)
Directional_NW(rf.for3, p=3)
Directional_NW(rf.for6, p=6)
Directional_NW(rf.for6, p=1)
rm(Directional_NW())
rm(Directional_NW)
Directional_NW(rf.for6, p=1)
Directional_NW(rf.for6, p=6)
Directional_NW(rf.for6, p=3)
Directional_NW(rf.for6, p=0)
Directional_NW(rf.for6, p=2)
Directional_NW<-function(forecasts=NULL, p=1, weighted=TRUE){
if(class(forecasts)!="Maeforecast"){
stop("Argument forecasts has to be of class 'Maeforecast'.")
}
nw <- function(y,qn){
T <- length(y)
ybar <- rep(1,T) * ((sum(y))/T)
dy <- y-ybar
G0 <- t(dy) %*% dy/T
for (j in 1:qn){
gamma <- t(dy[(j+1):T]) %*% dy[1:(T-j)]/T
G0 <- G0+(gamma+t(gamma))*(1-abs(j/(qn+1)))
}
return(as.numeric(G0))
}
if(weighted){
weighted.dir<-forecasts$Forecasts$Forecasted_Direction*forecasts$Forecasts$Realized
P <- length(weighted.dir)
varfroll.adj <- nw(y=weighted.dir, qn=p)
CW <- sqrt(P)*(mean(weighted.dir))/sqrt(varfroll.adj)
pv <- 1-pnorm(CW,0,1)
results=list(test.statistic=CW, pvalue=pv)
}else{
For<-forecasts$Forecasts$Forecasted_Direction-mean(forecasts$Forecasts$Forecasted_Direction)
True<-forecasts$Forecasts$True_Direction-mean(forecasts$Forecasts$True_Direction)
unweighted.dir<-For*True
P<-length(unweighted.dir)
varfroll.adj<-nw(y=unweighted.dir, qn=p)
CW<-sqrt(P)*(mean(unweighted.dir))/sqrt(varfroll.adj)
pv<-1-pnorm(CW,0,1)
results=list(test.statistic=CW, pvalue=pv)
}
return(results)
}
Directional_NW(rf.for6, p=2)
Directional_NW(rf.for6, p=6)
Directional_NW(rf.for6, p=0)
Directional_NW(rf.for6, p=3)
summary(rf.for6)
summary(rf.for12)
summary(rf.for12, p=12)
Directional_NW(rf.for12, p=12)
Directional_NW(dfm.for12, p=12)
Directional_NW(dfm.for12, p=0)
Directional_NW(dfm.for12, p=0, F)
Directional_NW(dfm.for12, p=12, F)
library(gtm)
rf.for3$Forecasts$Realized
library(gtm)
library(gtm)
view(alasso.for3$Forecasts)
View(alasso.for3$Forecasts)
sign(NA)
sign(NA)==sign(NA)
?cumsum
Test<-vector()
Test[1:2]<-NA
Test
Test<-c(1,2,3,4,5,6)
cumsum(Test[1:3])
cumsum(Test[1:3])[3]
cumsum(Test[2:4])[3]
library(gtm)
?forecast::dm.test
library(gtm)
library(gtm)
(2-0.257+(0.175/1.04))/1.8
(2-0.253+(0.175/1.04))/1.8
(2+(0.175/1.04))/1.8
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
load("~/Desktop/MAE_Lab/Projects/Google_Trends/Results/USD-AUS(h).RData")
CompTable.AR<-ForCompare(ar.for, lasso.for, alasso.for, ridge.for, postlasso.for, rf.for, dfm.for, net.for, mean.for, median.for, benchmark.index=1L, h=0)
library(gtm)
CompTable.AR<-ForCompare(ar.for, lasso.for, alasso.for, ridge.for, postlasso.for, rf.for, dfm.for, net.for, mean.for, median.for, benchmark.index=1L, h=0)
library(gtm)
CompTable.AR<-ForCompare(ar.for, lasso.for, alasso.for, ridge.for, postlasso.for, rf.for, dfm.for, net.for, mean.for, median.for, benchmark.index=1L, h=0)
library(gtm)
CompTable.AR<-ForCompare(ar.for, lasso.for, alasso.for, ridge.for, postlasso.for, rf.for, dfm.for, net.for, mean.for, median.for, benchmark.index=1L, h=0)
library(gtm)
CompTable.AR<-ForCompare(ar.for, lasso.for, alasso.for, ridge.for, postlasso.for, rf.for, dfm.for, net.for, mean.for, median.for, benchmark.index=1L, h=0)
CompTable.AR3<-ForCompare(ar.for3, lasso.for3, alasso.for3, ridge.for3, postlasso.for3, rf.for3, dfm.for3, net.for3, mean.for3, median.for3, benchmark.index=1L, h=3)
CompTable.AR6<-ForCompare(ar.for6, lasso.for6, alasso.for6, ridge.for6, postlasso.for6, rf.for6, dfm.for6, net.for6, mean.for6, median.for6, benchmark.index=1L, h=6)
CompTable.AR12<-ForCompare(ar.for12, lasso.for12, alasso.for12, ridge.for12, postlasso.for12, rf.for12,  dfm.for12, net.for12, mean.for12, median.for12, benchmark.index=1L, h=12)
CompTable.AR
CompTable.AR3
CompTable.AR6
CompTable.AR12
library(gtm)
summary(rw.for)
summary(rw.for3)
summary(rw.for6)
summary(rw.fo12)
summary(rw.for12)
rw.for<-maeforecast(data=as.matrix(mydata), model="rw", w_size=60, window="rolling", h=0)
rw.for3<-maeforecast(data=as.matrix(mydata), model="rw", w_size=60, window="rolling", h=3)
rw.for6<-maeforecast(data=as.matrix(mydata), model="rw", w_size=60, window="rolling", h=6)
rw.for12<-maeforecast(data=as.matrix(mydata), model="rw", w_size=60, window="rolling", h=12)
summary(rw.for)
summary(rw.for6)
CompTable<-ForCompare(rw.for, ar.for, lasso.for, alasso.for, ridge.for, postlasso.for, rf.for, dfm.for, net.for, mean.for, median.for, benchmark.index=1L, h=0)
CompTable3<-ForCompare(rw.for3, ar.for3, lasso.for3, alasso.for3, ridge.for3, postlasso.for3, rf.for3, dfm.for3, net.for3, mean.for3, median.for3, benchmark.index=1L, h=3)
CompTable6<-ForCompare(rw.for6, ar.for6, lasso.for6, alasso.for6, ridge.for6, postlasso.for6, rf.for6, dfm.for6, net.for6, mean.for6, median.for6, benchmark.index=1L, h=6)
CompTable12<-ForCompare(rw.for12, ar.for12, lasso.for12, alasso.for12, ridge.for12, postlasso.for12, rf.for12, dfm.for12, net.for12, mean.for12, median.for12, benchmark.index=1L, h=12)
CompTable.AR<-ForCompare(ar.for, lasso.for, alasso.for, ridge.for, postlasso.for, rf.for, dfm.for, net.for, mean.for, median.for, benchmark.index=1L, h=0)
CompTable.AR3<-ForCompare(ar.for3, lasso.for3, alasso.for3, ridge.for3, postlasso.for3, rf.for3, dfm.for3, net.for3, mean.for3, median.for3, benchmark.index=1L, h=3)
CompTable.AR6<-ForCompare(ar.for6, lasso.for6, alasso.for6, ridge.for6, postlasso.for6, rf.for6, dfm.for6, net.for6, mean.for6, median.for6, benchmark.index=1L, h=6)
CompTable.AR12<-ForCompare(ar.for12, lasso.for12, alasso.for12, ridge.for12, postlasso.for12, rf.for12,  dfm.for12, net.for12, mean.for12, median.for12, benchmark.index=1L, h=12)
CompTable
CompTable3
CompTable6
CompTable12
Tests.RW<-data.frame(Model=CompTable$Model, MSE=CompTable$MSE, MSERatio=CompTable$MSERatio, DMW=CompTable$DMW, CW=CompTable$CW)
colnames(Tests.RW)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
Tests.RW3<-data.frame(Model=CompTable3$Model, MSE=CompTable3$MSE, MSERatio=CompTable3$MSERatio, DMW=CompTable3$DMW, CW=CompTable3$CW)
colnames(Tests.RW3)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
Tests.RW6<-data.frame(Model=CompTable6$Model, MSE=CompTable6$MSE, MSERatio=CompTable6$MSERatio, DMW=CompTable6$DMW, CW=CompTable6$CW)
colnames(Tests.RW6)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
Tests.RW12<-data.frame(Model=CompTable12$Model, MSE=CompTable12$MSE, MSERatio=CompTable12$MSERatio, DMW=CompTable12$DMW, CW=CompTable$CW, CW=CompTable12$CW)
colnames(Tests.RW12)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
Tests<-data.frame(Model=CompTable.AR$Model, MSE=CompTable.AR$MSE, MSERatio=CompTable.AR$MSERatio, DMW=CompTable.AR$DMW, CW=CompTable.AR$CW)
colnames(Tests)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
Tests3<-data.frame(Model=CompTable.AR3$Model, MSE=CompTable.AR3$MSE, MSERatio=CompTable.AR3$MSERatio, DMW=CompTable.AR3$DMW, CW=CompTable.AR3$CW)
colnames(Tests3)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
Tests6<-data.frame(Model=CompTable.AR6$Model, MSE=CompTable.AR6$MSE, MSERatio=CompTable.AR6$MSERatio, DMW=CompTable.AR6$DMW, CW=CompTable.AR6$CW)
colnames(Tests6)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
Tests12<-data.frame(Model=CompTable.AR12$Model, MSE=CompTable.AR12$MSE, MSERatio=CompTable.AR12$MSERatio, DMW=CompTable.AR12$DMW, CW=CompTable.AR12$CW)
colnames(Tests12)<-c("Model", "MSE", "MSE Ratio", "DMW Test (p-value)", "CW Test (p-value)")
vignette(ggplot)
?theme
?plot.Maeforecast
?theme
library(gtm)
?plot.Maeforecast
library(gtm)
?Bagging
?Bagging
?apply
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
library(gtm)
?geom_line
t.rank
library(gtm)
methods(plot)
plot.RecMSE
gtm
?gtm
Bagging
?Bagging
?Bagging
?plot.Maeforecast
?rep
?seq
boot=100
paste("Bootstrap.", seq(from=1, to=boot, by=1))
paste("Bootstrap.", seq(from=1, to=boot, by=1), sep="")
library(gtm)
?gtrends
?get.trends
library(gtm)
?get.trends
data("countries")
?maeforecast
?load.data
load.data
df.split
?read.zoo
library(zoo)
?read.zoo
?zoo
library(gtm)
?maeforecast.alasso
?maeforecast
library(gtm)
?glmnet
library(glmnet)
?cv.glmnet
?maeforecast.dfm2
?maeforecast.lasso
?maeforecast.postnet
?maeforecast.ridge
maeforecast.ridge
postnet
maeforecast.postnet
?aenet
library(gtm)
citation(gtm)
citation("gtm")
?maeforecast
library(gtm)
?ifelse
ifelse
?is.atomic
?atomic
?as
?Bagging
Bagging
Metrics
ForCombo()
ForCombo
library(gtm)
library(gtm)
plot.Farima<-function(.data=NULL, start=NULL, frequency='month', forecast.lab="Forecasts", true.lab="Realized", x.lab="Time", y.lab="Value", title=NULL,
original=NULL, transform="logdiff"){
if(is.null(start)){
dates=seq(from=1, by=1, length.out=length(.data$Forecasts$Forecasts))
}else{
dates=seq(from = as.Date(start), by=frequency, length.out=length(.data$Forecasts$Forecasts))
}
suppressMessages(require(reshape2))
suppressMessages(require(ggplot2))
if(is.null(original)){
df <- data.frame(date=dates, predicts=as.numeric(.data$Forecasts$Forecasts),
true=as.numeric(.data$Forecasts$Realized))
colnames(df) <-c("Time", forecast.lab, true.lab)
df <- reshape2::melt(df, id.vars = "Time", value.name="Value", variable.name="Variable")
plot<-ggplot2::ggplot(data = df) +
geom_line(aes(x = Time, y = Value, linetype = Variable, color = Variable))+
xlab(x.lab)+ylab(y.lab)
if(!is.null(title)){
plot<-plot+ggtitle(title)
}
}else{
w_size=.data$Model$w_size
Date<-index(original)
Value<-as.numeric(original)
if(transform="logdiff"){
ForeValue<-exp(cumsum(.data$Forecasts$Forecasts))*Value[(w_size+1+h)]
ForeValue<-zoo(ForeValue, order.by=Date[(w_size+2+h):length(Date)])
Values<-merge(original, ForeValue)
}
names(Values)<-c("Realized", "Forecasts")
title<-paste(model, " Out-of-Sample Forecasts vs. Original Time Series, h=", h, sep="")
plot<-ggplot2::ggplot(Values)+
geom_line(aes(x=Date, y=as.numeric(Realized)))+
geom_line(aes(x=Date, y=as.numeric(Forecasts)), color="red", linetype="longdash")+
ylab("Values")+
ggtitle(title)
}
return(plot)
}
plot.Farima<-function(.data=NULL, start=NULL, frequency='month', forecast.lab="Forecasts", true.lab="Realized", x.lab="Time", y.lab="Value", title=NULL,
original=NULL, transform="logdiff")
{
if(is.null(start)){
dates=seq(from=1, by=1, length.out=length(.data$Forecasts$Forecasts))
}else{
dates=seq(from = as.Date(start), by=frequency, length.out=length(.data$Forecasts$Forecasts))
}
suppressMessages(require(reshape2))
suppressMessages(require(ggplot2))
if(is.null(original)){
df <- data.frame(date=dates, predicts=as.numeric(.data$Forecasts$Forecasts),
true=as.numeric(.data$Forecasts$Realized))
colnames(df) <-c("Time", forecast.lab, true.lab)
df <- reshape2::melt(df, id.vars = "Time", value.name="Value", variable.name="Variable")
plot<-ggplot2::ggplot(data = df) +
geom_line(aes(x = Time, y = Value, linetype = Variable, color = Variable))+
xlab(x.lab)+ylab(y.lab)
if(!is.null(title)){
plot<-plot+ggtitle(title)
}
}else{
w_size=.data$Model$w_size
Date<-index(original)
Value<-as.numeric(original)
if(transform=="logdiff"){
ForeValue<-exp(cumsum(.data$Forecasts$Forecasts))*Value[(w_size+1+h)]
ForeValue<-zoo(ForeValue, order.by=Date[(w_size+2+h):length(Date)])
Values<-merge(original, ForeValue)
}
names(Values)<-c("Realized", "Forecasts")
if(is.null(title)){
title<-paste("Out-of-Sample Forecasts vs. Original Time Series", sep="")
}else{
title<-title
}
plot<-ggplot2::ggplot(Values)+
geom_line(aes(x=Date, y=as.numeric(Realized)))+
geom_line(aes(x=Date, y=as.numeric(Forecasts)), color="red", linetype="longdash")+
ylab("Values")+
ggtitle(title)
}
return(plot)
}
?try
library(gtm)
?dm.test
library(gtm)
library(gtm)
library(gtm)
